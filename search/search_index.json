{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"National 5 Computing Science","text":"Welcome to SQA National 5 Computer Science! <p>This course will introduce you to the exciting world of technology, where you\u2019ll learn how computers work, how to design software, and how to manage data. We\u2019ll cover three main units: Software Design and Development, Computer Systems, and Database Design and Development.</p> <p>In Software Design and Development, you\u2019ll learn how to think like a programmer, creating and testing programs to solve problems. We\u2019ll explore coding basics, developing your skills to write and troubleshoot code effectively.</p> <p>The Computer Systems unit dives into what\u2019s inside a computer and how it works. You\u2019ll learn about hardware, software, and how they work together, along with a look into how data is stored and processed.</p> <p>Finally, in Database Design and Development, you\u2019ll learn how information is organized and stored. You\u2019ll create and manage databases, making it easy to store and access data effectively.</p> <p>By the end, you\u2019ll have a solid foundation in computer science, ready to explore more advanced topics or pursue a career in tech.</p>"},{"location":"CS/","title":"Computer Systems","text":""},{"location":"CS/01-Data-Rep/","title":"Data Representation","text":""},{"location":"DDD/","title":"Database Design and Development","text":""},{"location":"SDD/","title":"Software Design and Development","text":""},{"location":"SDD/01-Development-Methodologies/","title":"Development Methodologies","text":""},{"location":"SDD/01-Development-Methodologies/#what-is-a-software-development-methodology","title":"What is a Software Development Methodology?","text":"<p>To answer this, we will split the question into two parts, Software and Development Methodology.</p> <p>As you already know, all computer systems are made up of hardware and software.</p> <p>The term hardware is easy to understand, because you can touch it. For example, the processor, RAM, network adaptor and graphic cards etc...</p> <p>Software, however, is not so obvious\u2026\u2026\u2026\u2026\u2026\u2026</p> <p>Software is all the programs, instructions and data that allow the hardware to do something useful and interesting. Some of the most used include; word, excel, PowerPoint &amp; Google (other browsers are available!)</p> <p>Tip</p> <p>Software Development is defined as the process of designing, creating, testing, and maintaining computer programs and applications. There are many different  Software Development Methodologies that all follow a different path through the Development Process. </p>"},{"location":"SDD/01-Development-Methodologies/#the-waterfall-method","title":"The Waterfall Method","text":"<p>The development methodology you will be learning is known as a Waterfall model which consists of SIX different steps.</p> <p>A benefit of the Waterfall Methodology is that we can go back a step if there is a problem and fix it before then repeating the steps in order until we have the full working solution.</p>"},{"location":"SDD/01-Development-Methodologies/#the-six-stages-of-development","title":"The Six Stages of Development","text":""},{"location":"SDD/01-Development-Methodologies/#analysis","title":"Analysis","text":"<p>What is the purpose of the program? </p> <p>What features will it have? (This is known as functional requirements)</p> <p>What are the inputs, process and outputs?</p> <p>What data structures and data types will be used?</p>"},{"location":"SDD/01-Development-Methodologies/#design","title":"Design","text":"<p>The more planning you do the quicker the creation of the final product will be</p> <p>Break a problem into chunks </p> <p>Use diagrams to create and algorithm</p> <p>Pseudocode, Structure Diagrams and Flowcharts</p>"},{"location":"SDD/01-Development-Methodologies/#implementation","title":"Implementation","text":"<p>Create the solution to the problem</p> <p>Use previously designed Algorithms to signpost the way</p>"},{"location":"SDD/01-Development-Methodologies/#testing","title":"Testing","text":"<p>All work needs to be checked thoroughly for errors. </p> <p>Rigorous testing to systematically check every single operation/event.</p> <p>Rigorously test a range of scenarios to make sure the program does what it is supposed to.</p>"},{"location":"SDD/01-Development-Methodologies/#documentation","title":"Documentation","text":"<p>Collate diagrams, algorithms and testing tables.</p> <p>These documents together form the wider documentation (user guide &amp; technical guide).</p> <p>It is important that documentation is clear.</p> <p>Documentation should also show what each person did and what has happened thus far. </p>"},{"location":"SDD/01-Development-Methodologies/#evaluation","title":"Evaluation","text":"<p>Fit for Purpose - does it do what it is supposed to do?</p> <p>Efficient use of Coding Constructs  - correct use of repetition, arrays (instead of variables) and selection statements where possible to reduce the amount of code?</p> <p>Robustness \u2013 can it cope with unexpected or incorrect input?</p> <p>Readability - it is important to write code that can be read and understood by others. This should include internal commentary, meaningful identifiers, indentation and white space.</p>"},{"location":"SDD/02-Analysis/","title":"Analysis","text":""},{"location":"SDD/03-Design/","title":"Design","text":""},{"location":"SDD/03-Design/#program-design","title":"Program Design","text":""},{"location":"SDD/03-Design/#structure-diagrams","title":"Structure Diagrams","text":""},{"location":"SDD/03-Design/#flowcharts","title":"Flowcharts","text":""},{"location":"SDD/03-Design/#pseudocode","title":"Pseudocode","text":""},{"location":"SDD/04-Software-Implementation/","title":"Software Implementation","text":""},{"location":"SI/","title":"Software Implementation","text":"<p>Checklist - Implementation (data types and structures)</p> <code>Skills, Knowledge and Understanding</code> <p>Describe, exemplify, and implement appropriately the following data types and structures:</p> <ul> <li> character</li> <li> String</li> <li> numeric (integer and real)   </li> <li> Boolean </li> <li> 1-D arrays</li> </ul>"},{"location":"SI/01-Input-and-Output/","title":"Input and Output","text":""},{"location":"SI/01-Input-and-Output/#python-comments","title":"Python Comments","text":"<p>All of the programs you see will have lines that start with #</p> <p>Example</p> <pre><code># This is a comment\n# The computer ignores lines that start with this symbol\n</code></pre> <p>The computer ignores lines that start with a #. </p> <p>We call these Internal Comments.  </p> <p>It is good practice to write these comments in your code, to remind you what particular parts do.</p> <p>Info</p> <p>At National 5, you will be expected to use comments in your code.</p>"},{"location":"SI/01-Input-and-Output/#print-statement","title":"Print Statement","text":"<p>During most National 5 programs, you will be asked to display things on the screen. In Python, you do this with the print() statement.</p> <p>Example</p> <pre><code>print (\"Hello world\")\nprint (\"Welcome to\", \"National 5\")\nprint (\"My name is\", name)\n</code></pre> <p>In the brackets, put the message you want to print. </p> <p>If you want to display a variable, do not use quotation marks:</p> <p>Example</p> <pre><code>print(age)\nprint(name)\n</code></pre> <p>Note</p> <p>This would print whatever is in the variable, not the word age or name.</p> <p>If you want to print a string and a variable, use a comma between the strings:</p> <p>Example</p> <pre><code>print(\"Welcome to\", \"National 5\")\nprint(\"My name is\", name)\n</code></pre>"},{"location":"SI/01-Input-and-Output/#input-statement","title":"Input Statement","text":"<p>When you want the user to enter data, use an input statement.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n</code></pre> <p>This shows a message on the screen 'Please enter your name' and asks the user to type in some data. The data they enter is stored in a variable.</p> <p>Example</p> <pre><code># Enter some data from the keyboard\nname = input(\"Please enter your name\")\n\ntitle = input(\"Enter book title\")\nauthor = input(\"Enter book author\")\ngenre = input(\"Enter book genre\")\n</code></pre> <p>Info</p> <p>The input statement will be used in almost all of your programs.</p>"},{"location":"SI/01-Input-and-Output/#input-with-numbers","title":"Input with Numbers","text":"<p>When you input numbers, there is an extra step you must take.</p> <p>Any data that you input is automatically assumed to be a string.</p> <p>Strings can contain any sort of characters, including digits.</p> <p>Note</p> <p>It's important, if we want to use the data as a number (for example, doing a calculation with it) that we cast (convert) it from string to a number type.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n\n# When you input an integer number, use int( )\nage = int(input(\"Enter age\"))\n\n# When you input a real number, use float( )\nprice = float(input(\"Enter price\"))\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/","title":"Variables and Data Types","text":""},{"location":"SI/02-Variables-and-Data-Types/#what-are-variables","title":"What are Variables?","text":"<p>A variable is something that can be assigned a value.</p> <p>Example</p> <pre><code>x = 5\ny = 2\n</code></pre> <p>You will already have used similar in Maths. What is x + y? (the answer is 7)</p> <p>In computing however, we usually give them a longer (more meaningful) name, such as:</p> <p>Example</p> <pre><code>age = 15\nname = \"Bob\"\nemail = \"bob@gmail.com\"\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/#python-variable-naming-rules","title":"Python Variable Naming Rules","text":"<ul> <li>A variable name must start with a letter or the underscore character</li> <li>A variable name cannot start with a number</li> <li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li> <li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li> <li>A variable name cannot be any of the Python keywords.</li> </ul> <p>and although this one is not a rule....</p> <ul> <li>It is important to use meaningful or sensible variable names. </li> </ul>"},{"location":"SI/02-Variables-and-Data-Types/#types-of-variables","title":"Types of Variables","text":"<p>In programming variables have a particular type and for National 5 there are five data types that you need to know:</p> Data Type Description Integer Whole number: 12, -50, 100 Real number With a decimal point: 22.5, 0.001 String Words and symbols: hello, abc123 Character A single letter, digit or symbol: a, Z, $, # Boolean True (1) or False (0) <p>Warning</p> <p>Once a variable has been set up with a particular type, you can only assign it data of that type.</p> <p>Example</p> <pre><code># This is an integer\nmyage = int(15)\n\n# This is a real number\nprice = float(0.99)\n\n# This is a string\nfaveSubject = str(\"Computing\")\n\n# This is a character\nfirstInitial = char(\"F\")\n\n# This is a Boolean\nisStudent = bool(1)\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/#calculations","title":"Calculations","text":"<p>Python programs will often carry out calculations with operators. The result is usually stored in a variable:</p> <p>Example</p> <pre><code>num1 = 5\nnum2 = 7\nsum = num1 + num2\n</code></pre> <p>You can use the following operators:</p> <p>Example</p> <pre><code># Three variables\nnum1 = 5\nnum2 = 7\nsum = 0.0\n\n# Addition\nsum = num1 + num2\n\n# Subtraction\nsum = num1 - num2\n\n# Division\nsum = num1 / num2\n\n# Multiplication\nsum = num1 * num2\n\n# Raise to a power\nsum = num1 ** num2\n\n#Note that \u201craising to the power\u201d means, for example, num1**num2. \n\n#To square or cube a number, you would say:\nsquare = num1 ** 2\ncube = num1 ** 3\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/#string-concatenation","title":"String Concatenation","text":"<p>String concatenation is the term used when joining two strings.</p> <p>Example</p> <pre><code>word1 = \u201cHello\u201d\nword2 = \u201cWorld\u201d\n\nsentence = word1 + word2\n</code></pre> <p>Tip</p> <p>The example above doesn\u2019t include a space, you would have to add a space to the end of \u201cHello\u201d or the beginning of \u201cWorld\u201d.\u2003</p>"},{"location":"SI/03-Simple-Conditional-Statements/","title":"Simple Conditional Statements","text":""},{"location":"SI/03-Simple-Conditional-Statements/#selection-if-explanation","title":"Selection - If - Explanation","text":"<p>Programs have to make decisions.</p> <p>You have seen how these decisions can be represented on a flowchart (notice the diamond shapes with yes/no decisions).</p> <p>In National 5, you will often be asked to follow a design that has these decisions. You will implement the decisions in Python with if statements.</p>"},{"location":"SI/03-Simple-Conditional-Statements/#if-statements","title":"If statements","text":"<p>Your programs will often react to something input by the user:</p> <p>The user is asked to enter a password. If they enter \u201chello123\u201d, access is granted.</p> <pre><code>    # Ask the user to enter a password\n    passwd = input(\"Please enter the password\")\n\n    # Is access granted?\n    if passwd == \u201chello123\u201d:\n        print(\"Access granted\")\n</code></pre> <p>The if statement always starts with the word if, followed by a condition. A condition checks that something is equal to, greater than or less than something else. In this case, it checks if passwd (what the user entered) is equal to the string \u201chello123\u201d.</p> <p>We use indentation for any code that we want to be inside the if statement (this means we tab it in). Notice that the print statement is tabbed in slightly from the left. This means that it only happens if the if statement above it is true. We could have multiple lines of code inside the if statement. The if statement always ends in a colon :</p> <p>** Note the use of the double-equals ==. We use two equals signs when checking for equality in an if statement. We can use the == signs for testing if any variable matches any other data. When our data is a number (whether it is an integer or a real number), we can see if it is less than or greater than another number **</p> Symbols Description <code>==</code> Equal to, e.g. 5 == 5, score == 12 or faveSubject == \"Computing\" <code>&lt;</code> Less than, e.g. 40 and 62 are both &lt; 99 <code>&gt;</code> Greater than, e.g. 50.4 and 85.1 are both &gt; 10.8 <code>&lt;=</code> Less than or equal to, e.g. 22 and 70 are both &lt;= 70 <code>&gt;=</code> Greater than or equal to, e.g. 100 and 105 are both &gt;= 100"},{"location":"SI/03-Simple-Conditional-Statements/#multiple-selection-else-explanation","title":"Multiple Selection - Else - Explanation","text":"<p>Sometimes, we want the program to do something if data meets a condition, or otherwise, it is to do something else. This is called an else statement.</p> <p>A program could check that someone\u2019s age is greater than or equal to 17. If so, they are allowed to drive. </p> <p>If this is not so, they are not allowed to drive:</p> <p>Example</p> <pre><code>    # Ask the user for their age\n    age = int(input(\"Please enter your age\"))\n\n    # Old enough to drive?\n    if age &gt;= 17:\n        print(\"Broom broom\")\n    else:\n        print(\"Sorry, no drive yet\u201d)\n</code></pre> <p>In these examples, the program always does one thing, or the other. They are mutually exclusive. You cannot be both age &gt;= 17 and not &gt;= 17 at the same time, so only one branch of the decision is carried out.</p> <p>Note that, as before, the if and else statements end in a colon :</p> <p>The code that follows the if statement is indented (tabbed in). This means that it is only triggered if the if condition is true. The code after the else statement is indented. This means that the second print statement is only triggered if the condition is not true.</p>"},{"location":"SI/03-Simple-Conditional-Statements/#multiple-selection-elif-example","title":"Multiple Selection - Elif - Example","text":"<p>Sometimes, information comes in multiple categories.</p> <p>We could ask for a test mark percentage. If the mark is greater than (or equal to) 70, the student gets an A. Otherwise, if their mark is greater than or equal to 60, they get a B. Otherwise (again), if their mark is greater than or equal to 50, they should get a C, and otherwise (finally) they receive no award.</p> <p>This could be represented on a flowchart:</p> <p>This is very efficient, because the program only needs to check for a B or C if the person did not get an A. If they did get enough marks for an A, the program never has to check those conditions.</p> <p>In Python, we create this with elif (short for else-if):</p> <p>Example</p> <pre><code>    # Ask for percentage mark\n    mark = int(input(\"Please enter percentage mark\"))\n\n    # Check which category mark goes in\n    if mark &gt;= 70:\n        grade = \u201cA\u201d\n    elif mark &gt;= 60:\n        grade = \u201cB\u201d\n    elif mark &gt;= 50:\n        grade = \u201cC\u201d\n    else:\n        grade = \u201cF\u201d\n\n    # Print the grade\n    print(grade)\n</code></pre> <p>Elif is followed by a new condition (e.g. \u201celse if mark is greater than or equal to 50\u2026\u201d)</p> <p>If the mark is not greater than or equal to 50, the only other option is the \u201celse\u201d branch, which sets grade to F.</p>"},{"location":"SI/04-Complex-Conditional-Statements/","title":"Complex Conditional Statements","text":""},{"location":"SI/04-Complex-Conditional-Statements/#explanation","title":"Explanation","text":"<p>Sometimes conditions can be more complicated. The logical operators and, or and not can be added to make complex conditions.</p> <p>Suppose we ask for a percentage, but it must be between 0 and 100. This could also be written as greater than or equal to 0, and less than or equal to 100.</p> <ul> <li>The number 53 meets this condition, because it is &gt;= 0, and it is &lt;= 100</li> <li>Although the number 110 is &gt;= 0, it is not &lt;= 100, so the condition is not true</li> <li>-273 is less than or equal to 100, but it is not &gt;= 0, so the condition is not true</li> </ul>"},{"location":"SI/04-Complex-Conditional-Statements/#and","title":"<code>and</code>","text":"<p>Check if two conditions are both true</p> <p>Example</p> <pre><code>    if age &gt;= 17 and age &lt;= 100:\n        print(\u201cYou are between 17 and 100\u201d)\n</code></pre>"},{"location":"SI/04-Complex-Conditional-Statements/#or","title":"<code>or</code>","text":"<p>Check if at least one (or both) of the conditions is true.</p> <p>Example</p> <pre><code>    if weather == \u201crain\u201d or weather == \u201ccloudy\u201d\n        print(\u201cIt is not nice weather today\u201d)\n</code></pre>"},{"location":"SI/04-Complex-Conditional-Statements/#not","title":"<code>not</code>","text":"<p>Check if a condition is not true.</p> <p>Example</p> <pre><code>    if not age &lt; 17\n        print(\u201cYou are not less than 17\u201d)\n        print(\u201cSo you must be at least 17 or over\u201d)\n</code></pre> <p>You MUST to write the full condition out each time.</p> <p>You can\u2019t say:</p> <pre><code>    if weather == \u201crain\u201d or \u201ccloudy\u201d\n</code></pre> <p>You must say:</p> <pre><code>    if weather == \u201crain\u201d or weather == \u201ccloudy\u201d\n</code></pre>"},{"location":"SI/05-Fixed-Loops-%28for%29/","title":"Fixed Loops (for)","text":""},{"location":"SI/05-Fixed-Loops-%28for%29/#explanation","title":"Explanation","text":"<p>So far, when ever we have wanted to output a word multiple times, we have always wrote a new print statement for each line.</p> <p>Example</p> <pre><code>    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n</code></pre> <p>This is very inefficient.</p> <p>Suppose we wanted to change the message - we\u2019d have to go back and change every line individually, taking up time. </p> <p>To fix this we could instead, use a fixed loop.</p> <p>A fixed loop is a loop that repeats a certain (fixed) number of times. </p> <p>This example is exactly the same as the code above, but with much less code.</p> <p>Example</p> <pre><code>    for loop in range(1, 10):\n        print(\u201cHello world\u201d)\n</code></pre> <p>The word loop is a variable that we could use within our code. It is called the loop counter, because it counts how many times the loop has run so far. </p> <p>We could use any other variable name, say bananas:</p> <p>Example</p> <pre><code>    for bananas in range(0, 8):\n        print(bananas)\n</code></pre> <p>This (more complicated) example is a bitmore complicated as it asks the user to enter any number,ten times (0-9). </p> <p>Each time the loop repeats, it asks for another number, and adds it to its running total:</p> <p>Example</p> <pre><code>    # Example with a running total\n    total = 0\n\n    for loop in range(0, 10):\n        number = int(input(\"Please enter a number\"))\n        total = total + number\n\n    # Show total once the loop is done\n    print(total)\n</code></pre>"},{"location":"SI/06-Conditional-Loops-%28while%29/","title":"Conditional Loops (while)","text":""},{"location":"SI/06-Conditional-Loops-%28while%29/#explanation","title":"Explanation","text":"<p>A conditional loop (in Python, a while loop) repeats only while a condition is true. </p> <p>A conditional loop is like a combination of a fixed loop and an if statement and you can use all of the same conditions in a while loop that you would in an if statement.</p> <ul> <li> <p>In this example, the user is asked to enter a number. </p> </li> <li> <p>If the number is more than 100, part of the program repeats, asking them to enter the number again. </p> </li> <li> <p>It only repeats while their input is more than 100. Once that condition is met, the loop stops repeating and the program continues:</p> </li> </ul> <p>Example</p> <pre><code>    # Initialise the variable\n    mynumber = 0\n\n    # Ask the user to enter a number\n    mynumber = int(input(\"Please enter a number\"))\n\n    # Example of a while loop\n    while mynumber &gt; 100:\n        print(\"That number is too big!\")\n        mynumber = int(input(\"Please enter a number\"))\n</code></pre> <p>Warning - Don\u2019t get stuck in an infinite loop!</p> <p>Make sure that your condition will always end.</p> <p>For example, this loop would never end as 100 is always more than 5, so the loop will continue running indefinitely.</p> <pre><code>    while 100 &gt; 5:\n        print(\"One hundred is still more than five\")\n</code></pre>"},{"location":"SI/07-Pre-defined-Functions/","title":"Pre-Defined Functions","text":""},{"location":"SI/07-Pre-defined-Functions/#explanation","title":"Explanation","text":"<p>Pre-defined functions are built-in to Python. This saves you \u201creinventing the wheel\u201d each time you use them.</p> <p>When you use a pre-defined function, you pass one or more parameters. </p> <p>The parameter is the part in brackets.</p> <pre><code>    pi = round(3.14159265)\n</code></pre> <p>There are three pre-defined functions that you must know for National 5: </p> <ul> <li> <p>Random</p> </li> <li> <p>Round</p> </li> <li> <p>Length</p> </li> </ul>"},{"location":"SI/07-Pre-defined-Functions/#random","title":"Random","text":"<p>Something that is random is open to chance - like rolling dice, or tossing a coin.</p> <p>Before we use a random number, we have to put this line at the top of the program:</p> <p>Example</p> <pre><code>    # This program is going to use random numbers\n    import random\n</code></pre> <p>Random will always returns an integer (a whole number) and will only generate a random number that is between two parameters:</p> <p>Example</p> <pre><code>    # Generate a random number from 1 to 6\n    dice = random.randint(1, 6)\n</code></pre> <p>The code above will generate a number that could be either 1, 2, 3, 4, 5 or 6.</p> <p>Complete example:</p> <p>The Random Number Game</p> <pre><code>    # Add the random module\n    import random\n\n    # Ask the user to enter a number\n    guess = int(input(\"What is your guess?\"))\n\n    target = random.randint(1, 10)\n\n    if guess == target:\n        print(\"Well done, you guessed correctly.\")\n    else:\n        print(\"Sorry, you guessed wrongly\")\n</code></pre>"},{"location":"SI/07-Pre-defined-Functions/#length","title":"Length","text":"<p>The length function, shortened to len() returns the length - the number of characters - in a string.</p> <p>For example, len(\u201chello\u201d) is 5, and len(\u201cabc\u201d) is 3:</p> <p>This example calculates the length of a word, stores it in a variable called \u201chow_long\u201d, and displays it on the screen.</p> <p>Example</p> <pre><code>    # Stores and displays how many characters are in the word \u201chello\u201d\n    how_long = len(\"hello\")\n\n    print(how_long)\n</code></pre> <p>You could also use len() to ask the user to enter a password, and tell them whether their password is long enough:</p> <p>Example</p> <pre><code>    # Ask the user to enter their password\n    passwd = input(\"Please enter your password\")\n\n    # The password must be at least 6 characters long\n    if len(passwd) &gt; 6:\n        print(\"Your password is long enough\")\n    else:\n        print(\"Your password is NOT long enough\")\n</code></pre> <p>This problem could be refined further by using a loop and asking the user to keep entering their password until it is valid.</p>"},{"location":"SI/07-Pre-defined-Functions/#round","title":"Round","text":"<p>Using a round function, we can round a real number either:</p> <ul> <li> <p>To the nearest whole number</p> </li> <li> <p>To a certain number of decimal places.</p> </li> </ul> <p>To round to the nearest whole number (integer):</p> <p>This code would display the number 3.</p> <pre><code>    num1 = round(3.14159265)\n\n    print(num1)\n</code></pre> <p>To round to 2 decimal places:</p> <p>This code would print 3.14.</p> <pre><code>    num2 = round(3.14159265, 2)\n\n    print(num2)\n</code></pre> <p>We could round to any number of decimal places by adding it as a parameter in brackets:</p> <p>This code would round to 5 decimal places (3.14159).</p> <pre><code>    num3 = round(3.14159265, 5)\n\n    print(num3)\n</code></pre>"}]}